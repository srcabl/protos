// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sources

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SourceServiceClient is the client API for SourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SourceServiceClient interface {
	// HealthCheck is a basic healthcheck endpoint
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeterminePostSource determines the source of a post
	DeterminePostSource(ctx context.Context, in *DeterminePostSourceRequest, opts ...grpc.CallOption) (*DeterminePostSourceResponse, error)
}

type sourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSourceServiceClient(cc grpc.ClientConnInterface) SourceServiceClient {
	return &sourceServiceClient{cc}
}

func (c *sourceServiceClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/srcabl.sources.SourceService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) DeterminePostSource(ctx context.Context, in *DeterminePostSourceRequest, opts ...grpc.CallOption) (*DeterminePostSourceResponse, error) {
	out := new(DeterminePostSourceResponse)
	err := c.cc.Invoke(ctx, "/srcabl.sources.SourceService/DeterminePostSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SourceServiceServer is the server API for SourceService service.
// All implementations must embed UnimplementedSourceServiceServer
// for forward compatibility
type SourceServiceServer interface {
	// HealthCheck is a basic healthcheck endpoint
	HealthCheck(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// DeterminePostSource determines the source of a post
	DeterminePostSource(context.Context, *DeterminePostSourceRequest) (*DeterminePostSourceResponse, error)
	mustEmbedUnimplementedSourceServiceServer()
}

// UnimplementedSourceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSourceServiceServer struct {
}

func (UnimplementedSourceServiceServer) HealthCheck(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedSourceServiceServer) DeterminePostSource(context.Context, *DeterminePostSourceRequest) (*DeterminePostSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeterminePostSource not implemented")
}
func (UnimplementedSourceServiceServer) mustEmbedUnimplementedSourceServiceServer() {}

// UnsafeSourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SourceServiceServer will
// result in compilation errors.
type UnsafeSourceServiceServer interface {
	mustEmbedUnimplementedSourceServiceServer()
}

func RegisterSourceServiceServer(s grpc.ServiceRegistrar, srv SourceServiceServer) {
	s.RegisterService(&SourceService_ServiceDesc, srv)
}

func _SourceService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srcabl.sources.SourceService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceService_DeterminePostSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeterminePostSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).DeterminePostSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srcabl.sources.SourceService/DeterminePostSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).DeterminePostSource(ctx, req.(*DeterminePostSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SourceService_ServiceDesc is the grpc.ServiceDesc for SourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "srcabl.sources.SourceService",
	HandlerType: (*SourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _SourceService_HealthCheck_Handler,
		},
		{
			MethodName: "DeterminePostSource",
			Handler:    _SourceService_DeterminePostSource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sources/service.proto",
}
